generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id             Int        @id @default(autoincrement())
  name           String?
  email          String     @unique
  role           UserRole?
  paymentInfo    String?
  inviteCode     String?    @db.Uuid
  signupComplete Boolean?
  createdAt      DateTime   @default(now()) @db.Timestamp(6)
  city           String?
  state          String?
  country        String?
  timezone       String?

  // Role-specific relations
  admin          Admin?
  teacher        Teacher?
  student        Student?

  // Associations with classrooms and organizations
  userClassrooms     UserClassroom[]
  userOrganizations  UserOrganization[]
}

model Admin {
  id       Int   @id
  isActive Boolean?
  user     User  @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Teacher {
  id              Int          @id
  hireDate        DateTime?    @db.Date
  terminationDate DateTime?    @db.Date
  joinedAt        DateTime     @default(now()) @db.Timestamp(6)
  isActive        Boolean?     @default(true)

  // A teacher leads one or more classrooms.
  classrooms      Classroom[]

  user            User         @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Student {
  id                    Int          @id
  joinedAt              DateTime     @default(now()) @db.Timestamp(6)
  isActive              Boolean?     @default(true)

  // Submission history.
  assignmentSubmissions AssignmentSubmission[]
  questionSubmissions   QuestionSubmission[]

  user                  User         @relation(fields: [id], references: [id], onDelete: Cascade)
  studentClassrooms     StudentClassroom[]
}

model Organization {
  id                Int                @id @default(autoincrement())
  name              String?
  description       String?
  website           String?
  oldId             String?            @db.Uuid

  userOrganizations UserOrganization[]
}

model Classroom {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  capacity          Int?
  teacherId         Int
  startDate         DateTime?          @db.Date
  endDate           DateTime?          @db.Date

  //Each classroom hosts multiple courses.
  courses           Course[]

  teacher           Teacher            @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  studentClassrooms StudentClassroom[]
  userClassrooms    UserClassroom[]
}

model Course {
  id          Int         @id @default(autoincrement())
  classroomId Int
  name        String
  description String?
  startDate   DateTime?   @db.Date
  endDate     DateTime?   @db.Date

  // A course belongs only to one classroom.
  classroom   Classroom   @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  
  // A course has many assignments.
  assignments Assignment[]
}

model Assignment {
  id                 Int                   @id @default(autoincrement())
  courseId           Int
  name               String
  description        String?
  assignmentNumber   Int?
  dueDate            DateTime              @db.Date
  createdAt          DateTime              @default(now()) @db.Timestamp(6)

  // Each assignment is part of a course.
  course             Course                @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Submissions and questions.
  assignmentSubmissions AssignmentSubmission[]
  questions          Question[]
}

model AssignmentSubmission {
  id             Int                   @id @default(autoincrement())
  assignmentId   Int
  studentId      Int
  s3Path         String
  submittedAt    DateTime              @default(now()) @db.Timestamp(6)

  assignment   Assignment  @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  questionSubmissions QuestionSubmission[]
}

model Question {
  id                    Int                  @id @default(autoincrement())
  assignmentId          Int
  questionNumber        Int?
  name                  String?
  prompt                String?
  exampleSolutionS3Path String?
  acceptedFileTypes     String?
  createdAt             DateTime             @default(now()) @db.Timestamp(6)

  // A question is part of an assignment.
  assignment           Assignment           @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  questionSubmissions  QuestionSubmission[]
}

model QuestionSubmission {
  id                      Int                   @id @default(autoincrement())
  assignmentSubmissionId  Int
  questionId              Int
  studentId             Int
  s3Path                 String
  createdAt              DateTime              @default(now()) @db.Timestamp(6)

  assignmentSubmission   AssignmentSubmission  @relation(fields: [assignmentSubmissionId], references: [id], onDelete: Cascade)
  question               Question              @relation(fields: [questionId], references: [id], onDelete: Cascade)
  student                Student               @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model StudentClassroom {
  id           Int       @id @default(autoincrement())
  classroomId  Int
  studentId    Int
  enrolledAt   DateTime  @default(now()) @db.Timestamp(6)

  classroom    Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classroomId, studentId])
}

model UserClassroom {
  id           Int       @id @default(autoincrement())
  userId       Int
  classroomId  Int
  role         String?

  classroom    Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, classroomId])
}

model UserOrganization {
  id             Int           @id @default(autoincrement())
  userId         Int
  organizationId Int

  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}
