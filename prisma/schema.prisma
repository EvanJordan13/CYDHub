generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The central User model. This serves for students, teachers, and admins.
model User {
  id                 Int               @id @default(autoincrement())
  name               String?
  email              String            @unique
  role               UserRole
  avatarUrl          String?
  githubHandle       String?
  signupComplete     Boolean           @default(false)
  points             Int               @default(0)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  auth0Id            String?           @unique
  birthdate          String?
  pronouns           String?
  Invitation         Invitation[]
  notifications      Notification[]
  createdPrograms    Program[]         @relation("TeacherPrograms")
  programEnrollments ProgramUser[]
  submissions        Submission[]
  surveyResponses    SurveyResponse[]
  achievements       UserAchievement[]
}

/// A Program which may be in-person, online, or async.
/// Teachers invite students and assign programs to a program.
model Program {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  type          ProgramType
  subject       String
  teacherId     Int
  syllabus      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  announcements Announcement[]
  Invitation    Invitation[]
  meetings      Meeting[]
  modules       Module[]       @relation("ModuleToProgram")
  teacher       User           @relation("TeacherPrograms", fields: [teacherId], references: [id])
  enrollments   ProgramUser[]
  Survey        Survey[]
  archived      Boolean?       @default(false)
}

/// Join table for Users and Programs.
model ProgramUser {
  id        Int       @id @default(autoincrement())
  userId    Int
  programId Int
  role      UserRole?
  joinedAt  DateTime  @default(now())
  program   Program   @relation(fields: [programId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, programId])
}

/// Modules that contain curriculum content.
/// These can be shared among many programs.
model Module {
  id          Int              @id @default(autoincrement())
  programId   Int
  title       String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  assignments Assignment[]
  program     Program          @relation("ModuleToProgram", fields: [programId], references: [id])
  materials   ModuleMaterial[]
}

/// Materials (e.g. slides, recordings, files) linked to a program.
model ModuleMaterial {
  id           Int          @id @default(autoincrement())
  moduleId     Int
  title        String
  overview     String?
  materialType MaterialType
  fileUrl      String?
  order        Int?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  fileName     String?
  module       Module       @relation(fields: [moduleId], references: [id])
}

/// Assignments which can be pushed to students via a module.
model Assignment {
  id               Int                  @id @default(autoincrement())
  moduleId         Int?
  title            String
  description      String?
  dueDate          DateTime?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  assignmentNumber Int?
  questionCount    Int?
  module           Module?              @relation(fields: [moduleId], references: [id])
  questions        AssignmentQuestion[]
  submissions      Submission[]
}

/// Questions that make up an assignment.
/// Supports various types (multiple choice, short answer, code editor, file upload).
model AssignmentQuestion {
  id               Int                @id @default(autoincrement())
  assignmentId     Int
  questionText     String
  questionType     QuestionType
  options          String?
  order            Int?
  assignment       Assignment         @relation(fields: [assignmentId], references: [id])
  SubmissionAnswer SubmissionAnswer[]
}

/// A student’s submission to an assignment.
model Submission {
  id               Int                @id @default(autoincrement())
  assignmentId     Int
  studentId        Int
  content          String?
  fileUrl          String?
  grade            Float?
  teacherFeedback  String?
  submittedAt      DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  assignment       Assignment         @relation(fields: [assignmentId], references: [id])
  student          User               @relation(fields: [studentId], references: [id])
  SubmissionAnswer SubmissionAnswer[]

  @@unique([studentId, assignmentId], name: "studentId_assignmentId")
}

model SubmissionAnswer {
  id                   Int                @id @default(autoincrement())
  submissionId         Int
  assignmentQuestionId Int
  answerText           String?
  fileUrl              String?
  grade                Float?
  feedback             String?
  submission           Submission         @relation(fields: [submissionId], references: [id])
  question             AssignmentQuestion @relation(fields: [assignmentQuestionId], references: [id])

  @@unique([submissionId, assignmentQuestionId])
}

/// Surveys for collecting pre/post (or other) feedback.
model Survey {
  id          Int              @id @default(autoincrement())
  title       String
  description String?
  surveyType  SurveyType
  programId   Int?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  program     Program?         @relation(fields: [programId], references: [id])
  questions   SurveyQuestion[]
}

/// Questions for a survey.
model SurveyQuestion {
  id             Int              @id @default(autoincrement())
  surveyId       Int
  questionText   String
  questionType   QuestionType
  order          Int?
  survey         Survey           @relation(fields: [surveyId], references: [id])
  SurveyResponse SurveyResponse[]
}

/// A student’s response to a survey question.
model SurveyResponse {
  id               Int            @id @default(autoincrement())
  surveyQuestionId Int
  studentId        Int
  response         String?
  submittedAt      DateTime       @default(now())
  student          User           @relation(fields: [studentId], references: [id])
  surveyQuestion   SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
}

/// Achievements to reward students (or even teachers) for milestones.
model Achievement {
  id              Int               @id @default(autoincrement())
  title           String
  description     String?
  createdAt       DateTime          @default(now())
  UserAchievement UserAchievement[]
}

/// Join table to record which users have earned which achievements.
model UserAchievement {
  id            Int         @id @default(autoincrement())
  userId        Int
  achievementId Int
  earnedAt      DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
}

/// Notifications for upcoming assignments, deadlines, or announcements.
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

/// Meetings (program schedules) within a program.
model Meeting {
  id          Int      @id @default(autoincrement())
  programId   Int
  title       String
  description String?
  meetingTime DateTime
  meetingLink String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  program     Program  @relation(fields: [programId], references: [id])
}

/// Announcements made within a program.
model Announcement {
  id        Int      @id @default(autoincrement())
  programId Int
  title     String
  content   String
  createdAt DateTime @default(now())
  program   Program  @relation(fields: [programId], references: [id])
}

/// Invitations used by teachers to invite students to a program.
model Invitation {
  id          Int       @id @default(autoincrement())
  programId   Int
  email       String
  token       String    @unique
  invitedById Int
  status      String
  createdAt   DateTime  @default(now())
  acceptedAt  DateTime?
  invitedBy   User      @relation(fields: [invitedById], references: [id])
  program     Program   @relation(fields: [programId], references: [id])
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum ProgramType {
  IN_PERSON
  ONLINE
  ASYNC
}

enum QuestionType {
  MULTIPLE_CHOICE
  SHORT_ANSWER
  CODE_EDITOR
  FILE_UPLOAD
}

enum MaterialType {
  FILE
  URL
  RECORDING
  SLIDES
  NOTES
}

enum SurveyType {
  PRE
  POST
  OTHER
}
